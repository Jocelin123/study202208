{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "args = (<study202208.practice.test.test_baiduexception.TestBaiduException object at 0x00000160EA1CB760>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bb5dc556d286e0ef37b04e70a21e1df5\")>, timestamp = 1662032523, imagepath = './image/image_1662032523.PNG'\npagesourcepath = './htmlsource/source_1662032523.html', f = <_io.TextIOWrapper name='./htmlsource/source_1662032523.html' mode='w' encoding='u8'>\n\n    def inner(*args,**kwargs):\n        #获取被装饰方法的driver，即实例对象;前提条件：1.被装饰的方法是一个实例方法，2.实例需要有实例变量self.driver\n        driver=args[0].driver\n        try:\n>           func(*args,**kwargs)\n\ntest_baiduexception.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <study202208.practice.test.test_baiduexception.TestBaiduException object at 0x00000160EA1CB760>\n\n    @Exception1\n    def test_baidu(self):\n>       self.driver.find_element(By.ID,\"su1\").click()\n\ntest_baiduexception.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bb5dc556d286e0ef37b04e70a21e1df5\")>, by = 'css selector', value = '[id=\"su1\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bb5dc556d286e0ef37b04e70a21e1df5\")>, driver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[id=\"su1\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000160EA1CBAF0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B07A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B07A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"su1\"]\"}\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00AF5FD3+2187219]\nE       \tOrdinal0 [0x00A8E6D1+1763025]\nE       \tOrdinal0 [0x009A3E78+802424]\nE       \tOrdinal0 [0x009D1C10+990224]\nE       \tOrdinal0 [0x009D1EAB+990891]\nE       \tOrdinal0 [0x009FEC92+1174674]\nE       \tOrdinal0 [0x009ECBD4+1100756]\nE       \tOrdinal0 [0x009FCFC2+1167298]\nE       \tOrdinal0 [0x009EC9A6+1100198]\nE       \tOrdinal0 [0x009C6F80+946048]\nE       \tOrdinal0 [0x009C7E76+949878]\nE       \tGetHandleVerifier [0x00D990C2+2721218]\nE       \tGetHandleVerifier [0x00D8AAF0+2662384]\nE       \tGetHandleVerifier [0x00B8137A+526458]\nE       \tGetHandleVerifier [0x00B80416+522518]\nE       \tOrdinal0 [0x00A94EAB+1789611]\nE       \tOrdinal0 [0x00A997A8+1808296]\nE       \tOrdinal0 [0x00A99895+1808533]\nE       \tOrdinal0 [0x00AA26C1+1844929]\nE       \tBaseThreadInitThunk [0x75C4FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B07A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B07A6E+238]\n\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<study202208.practice.test.test_baiduexception.TestBaiduException object at 0x00000160EA1CB760>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bb5dc556d286e0ef37b04e70a21e1df5\")>, timestamp = 1662032523, imagepath = './image/image_1662032523.PNG'\npagesourcepath = './htmlsource/source_1662032523.html', f = <_io.TextIOWrapper name='./htmlsource/source_1662032523.html' mode='w' encoding='u8'>\n\n    def inner(*args,**kwargs):\n        #获取被装饰方法的driver，即实例对象;前提条件：1.被装饰的方法是一个实例方法，2.实例需要有实例变量self.driver\n        driver=args[0].driver\n        try:\n            func(*args,**kwargs)\n        except Exception:\n            print(\"出现异常处理\")\n            timestamp = int(time.time())\n            imagepath = f\"./image/image_{timestamp}.PNG\"\n            pagesourcepath = f\"./htmlsource/source_{timestamp}.html\"\n            driver.save_screenshot(imagepath)\n            with open(pagesourcepath, \"w\", encoding='u8') as f:\n                f.write(driver.page_source)\n            allure.attach.file(imagepath, name=\"测试截图\", attachment_type=allure.attachment_type.PNG, extension=\".png\")\n            allure.attach.file(pagesourcepath, name=\"html源码\", attachment_type=allure.attachment_type.TEXT)\n>           raise Exception\nE           Exception\n\ntest_baiduexception.py:23: Exception"}, "attachments": [{"name": "测试截图", "source": "8a72829a-91f6-4619-8090-d4829704c46b-attachment.png", "type": "image/png"}, {"name": "html源码", "source": "4918591f-7448-49f5-94b1-04ecb2acf663-attachment.txt", "type": "text/plain"}], "start": 1662032520062, "stop": 1662032523251, "uuid": "516c5f41-4893-47b3-bbce-7586e2f3ed05", "historyId": "84717e22742431e554c75c0f3dc2178d", "testCaseId": "47770a05c54c8a2811f28e5c46ae9884", "fullName": "practice.test.test_baiduexception.TestBaiduException#test_baidu", "labels": [{"name": "parentSuite", "value": "practice.test"}, {"name": "suite", "value": "test_baiduexception"}, {"name": "subSuite", "value": "TestBaiduException"}, {"name": "host", "value": "LAPTOP-BEO6NH7O"}, {"name": "thread", "value": "62096-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "practice.test.test_baiduexception"}]}