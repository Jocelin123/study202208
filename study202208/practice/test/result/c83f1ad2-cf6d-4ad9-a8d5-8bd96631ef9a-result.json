{"name": "test_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\n  (Session info: chrome=103.0.5060.114)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00AF5FD3+2187219]\n\tOrdinal0 [0x00A8E6D1+1763025]\n\tOrdinal0 [0x009A3E78+802424]\n\tOrdinal0 [0x009D1DA1+990625]\n\tOrdinal0 [0x009D1EAB+990891]\n\tOrdinal0 [0x009FEC92+1174674]\n\tOrdinal0 [0x009ECBD4+1100756]\n\tOrdinal0 [0x009FCFC2+1167298]\n\tOrdinal0 [0x009EC9A6+1100198]\n\tOrdinal0 [0x009C6F80+946048]\n\tOrdinal0 [0x009C7E76+949878]\n\tGetHandleVerifier [0x00D990C2+2721218]\n\tGetHandleVerifier [0x00D8AAF0+2662384]\n\tGetHandleVerifier [0x00B8137A+526458]\n\tGetHandleVerifier [0x00B80416+522518]\n\tOrdinal0 [0x00A94EAB+1789611]\n\tOrdinal0 [0x00A997A8+1808296]\n\tOrdinal0 [0x00A99895+1808533]\n\tOrdinal0 [0x00AA26C1+1844929]\n\tBaseThreadInitThunk [0x75C4FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B07A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B07A6E+238]", "trace": "self = <study202208.practice.test.test_pageobject.TestSearch object at 0x00000222D812F550>\n\n    def test_search(self):\n>       name=XueQiuPO().search_stock(\"阿里巴巴-SW\")\n\ntest_pageobject.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pageobject\\xueqiu_pageobject.py:15: in search_stock\n    self.driver.find_element(self._INPUT_SEARCH).send_keys(stock_name)\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1251: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000222D812F7C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: \\'using\\' must be a string...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B07A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B07A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: 'using' must be a string\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00AF5FD3+2187219]\nE       \tOrdinal0 [0x00A8E6D1+1763025]\nE       \tOrdinal0 [0x009A3E78+802424]\nE       \tOrdinal0 [0x009D1DA1+990625]\nE       \tOrdinal0 [0x009D1EAB+990891]\nE       \tOrdinal0 [0x009FEC92+1174674]\nE       \tOrdinal0 [0x009ECBD4+1100756]\nE       \tOrdinal0 [0x009FCFC2+1167298]\nE       \tOrdinal0 [0x009EC9A6+1100198]\nE       \tOrdinal0 [0x009C6F80+946048]\nE       \tOrdinal0 [0x009C7E76+949878]\nE       \tGetHandleVerifier [0x00D990C2+2721218]\nE       \tGetHandleVerifier [0x00D8AAF0+2662384]\nE       \tGetHandleVerifier [0x00B8137A+526458]\nE       \tGetHandleVerifier [0x00B80416+522518]\nE       \tOrdinal0 [0x00A94EAB+1789611]\nE       \tOrdinal0 [0x00A997A8+1808296]\nE       \tOrdinal0 [0x00A99895+1808533]\nE       \tOrdinal0 [0x00AA26C1+1844929]\nE       \tBaseThreadInitThunk [0x75C4FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B07A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77B07A6E+238]\n\nD:\\zj\\software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: InvalidArgumentException"}, "start": 1662031244139, "stop": 1662031246864, "uuid": "d67d7e54-8600-46d7-80ff-eadc8d482177", "historyId": "8ed0ade9a3edb0a68a4b5518ec5ae51b", "testCaseId": "389e92bcfea0929b82a49f79b5b39083", "fullName": "practice.test.test_pageobject.TestSearch#test_search", "labels": [{"name": "parentSuite", "value": "practice.test"}, {"name": "suite", "value": "test_pageobject"}, {"name": "subSuite", "value": "TestSearch"}, {"name": "host", "value": "LAPTOP-BEO6NH7O"}, {"name": "thread", "value": "58592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "practice.test.test_pageobject"}]}